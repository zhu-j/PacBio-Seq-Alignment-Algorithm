# -*- coding: utf-8 -*-
"""Banded Needleman Wunsch.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tPM4j6Hp0ApWZtA_Wr8prwq0M3Qa9E4i
"""

import numpy as np

def insideBand(i,j,k):
  if abs(i-j) <= k:
    return True
  else:
     return False

#this function does the banded Needleman-Wunsch alignment

def banded_needleman_wunsch(read1,read2,k,gap_penalty,match_score,mismatch_score):#k is the number of unpenalized nucleotides
  length_read1=len(read1)
  length_read2=len(read2)

  #initialization
  matrix=np.zeros((length_read1+1,length_read2+1))
  #Fill the score for the first slot
  #matrix[1,0]=gap_penalty
  matrix[0,0]=gap_penalty
  #initilaize the first row and first column within k
  for i in range(1,k+1):
    matrix[i,0]=gap_penalty*(i+1)
  for j in range(1,k+1):
    matrix[0,j]=gap_penalty*(j+1)
  
  score=np.zeros(3)
  for i in range(1,length_read1+1):
    for d in range(-k,k):
       j=i+d
       
       if 1 <= j and j<= length_read2:
         if read1[i-1]==read2[j-1]:
           matrix[i,j]=matrix[i-1,j-1]+match_score
         else:
           matrix[i,j]=matrix[i-1,j-1]+mismatch_score
         if insideBand(i-1,j,k):
           matrix[i,j]=max(matrix[i,j],matrix[i-1,j]+gap_penalty)
         if insideBand(i,j-1,k):
           matrix[i,j]=max(matrix[i,j],matrix[i,j-1]+gap_penalty)
  print(matrix)
  a=len(read1)
  b=len(read2)
  score=matrix[a][b]
  match=0
  while(a>0 or b>0):
    if a>0 and b>0 and ((matrix[a][b] == matrix[a-1][b-1]+match_score and read1[a-1]==read2[b-1]) or (matrix[a][b]==matrix[a-1][b-1]+mismatch_score)):
      if matrix[a][b]==matrix[a-1][b-1]+match_score and read1[a-1]==read2[b-1]:
        match +=1
      a-=1
      b-=1
    
    elif b>0 and (matrix[a][b]==matrix[a][b-1]+gap_penalty):

      b-=1
    elif a>0 and (matrix[a][b]==matrix[a-1][b]+gap_penalty):
      a-=1

  
  return match

read1=['A','C','C']
read2=['A','A']
a=banded_needleman_wunsch(read1,read2,2,-2,1,-1)

print(a)