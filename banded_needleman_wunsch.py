# -*- coding: utf-8 -*-
"""Banded Needleman Wunsch.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tPM4j6Hp0ApWZtA_Wr8prwq0M3Qa9E4i
"""

import numpy as np

#this function does the banded Needleman-Wunsch alignment

def banded_needleman_wunsch(read1,read2,k,gap_penalty,match_score,mismatch_score):#k is the number of unpenalized nucleotides
  length_read1=len(read1)
  length_read2=len(read2)

  #initialization
  matrix=np.zeros((length_read2+1,length_read1+1))
  #Fill the score for the first slot
  matrix[1,0]=gap_penalty
  matrix[0,1]=gap_penalty
  #initilaize the first row and first column within k
  for i in range(1,k):
    matrix[i,0]=gap_penalty*i
  for j in range(1,k):
    matrix[0,j]=gap_penalty*j
  
  score=np.zeros(3)
  for i in range(1,length_read2):
    for j in range(max(1,i-k),min(length_read1,i+k)):
       #Calculate the score when we align two nucleotides
       if read1[i]==read2[j]:
          score[0]=matrix[i,j]+match_score
       else:
          score[0]=matrix[i,j]+mismatch_score
       #Calculate the score when we insert gap
    
       if j>i-k:
         score[1]=matrix[i,j-1]+gap_penalty
       if j<i+k:
         score[2]=matrix[i-1,j]+gap_penalty
       score_max=np.max(score)
       matrix[i+1,j+1]=score_max
  
  return matrix[length_read2,length_read1]